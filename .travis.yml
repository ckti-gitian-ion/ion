# errata:
# - sudo/dist/group are set so as to get Blue Box VMs, necessary for [loopback]
#   IPv6 support

sudo: required
dist: bionic

dist: xenial
os: linux
language: minimal
cache:
  ccache: true
  directories:
    - $TRAVIS_BUILD_DIR/depends/built
    - $TRAVIS_BUILD_DIR/depends/sdk-sources
    - $HOME/.ccache
stages:
  - lint
  - test
env:
  global:
    - MAKEJOBS=-j3
    - RUN_UNIT_TESTS=false
    - RUN_FUNCTIONAL_TESTS=false # Not Yet Implemented
    - RUN_BENCH=false  # Set to true for any one job that has debug enabled, to quickly check bench is not crashing or hitting assertions
    - DOCKER_NAME_TAG=ubuntu:18.04
    - BOOST_TEST_RANDOM=1$TRAVIS_BUILD_ID
    - CCACHE_SIZE=100M
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - CCACHE_DIR=$HOME/.ccache
    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out
    - SDK_URL=https://github.com/gitianuser/MacOSX-SDKs/releases/download/MacOSX10.11.sdk
    - WINEDEBUG=fixme-all
    - DOCKER_PACKAGES="build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git ca-certificates ccache"
    - CACHE_ERR_MSG="Error! Initial build successful, but not enough time remains to run later build stages and tests. Please manually re-run this job by using the travis restart button or asking a bitcoin maintainer to restart. The next run should not time out because the build cache has been saved."
before_install:
  - set -o errexit; source .travis/test_03_before_install.sh
install:
  - set -o errexit; source .travis/test_04_install.sh
before_script:
  - set -o errexit; source .travis/test_05_before_script.sh
script:
  - export CONTINUE=1
  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long
  - if [ $CONTINUE = "1" ]; then set -o errexit; source .travis/test_06_script_a.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
  - if [ $SECONDS -gt 1500 ]; then export CONTINUE=0; fi  # Likely the build took very long; The tests take about 1000s, so we should abort if we have less than 50*60-1000=2000s left
  - if [ $CONTINUE = "1" ]; then set -o errexit; source .travis/test_06_script_b.sh; else set +o errexit; echo "$CACHE_ERR_MSG"; false; fi
after_script:
  - echo $TRAVIS_COMMIT_RANGE
  - echo $TRAVIS_COMMIT_LOG
jobs:
  include:

    - stage: lint
      name: 'lint'
      env:
      cache: false
      language: python
      python: '3.5' # Oldest supported version according to doc/dependencies.md
      install:
        - set -o errexit; source .travis/lint_04_install.sh
      before_script:
        - set -o errexit; source .travis/lint_05_before_script.sh
      script:
        - set -o errexit; source .travis/lint_06_script.sh

    - stage: test
      name: 'ARM 32-bit  [GOAL: install]  [no unit or functional tests]'
      env: >-
        HOST=arm-linux-gnueabihf
        PACKAGES="python3 g++-arm-linux-gnueabihf"
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        # -Wno-psabi is to disable ABI warnings: "note: parameter passing for argument of type ... changed in GCC 7.1"
        # This could be removed once the ABI change warning does not show up by default
        ION_CONFIG="--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi"

    - stage: test
      name: 'ARM 64-bit  [GOAL:install] [no unit or functional tests]'
      env: >-
        HOST=aarch64-linux-gnu
        PACKAGES="python3 g++-aarch64-linux-gnu"
        RUN_FUNCTIONAL_TESTS=false
        GOAL="install"
        ION_CONFIG="--enable-glibc-back-compat --enable-reduce-exports"

runtests: &runtests
  stage: run tests
  script:
    - $DOCKER_RUN_IN_BUILDER ./ci/build_depends.sh
    - $DOCKER_RUN_IN_BUILDER ./ci/build_src.sh
    - $DOCKER_RUN_IN_BUILDER ./ci/test_unittests.sh
    - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then extended="--extended --exclude pruning,dbcrash"; fi
    - $DOCKER_RUN_IN_BUILDER ./ci/test_integrationtests.sh --quiet --jobs=3 ${extended}

    - stage: test
      name: 'Win32  [GOAL: deploy] [no functional tests]'
      env: >-
        HOST=i686-w64-mingw32
        DPKG_ADD_ARCH="i386"
        PACKAGES="python3 nsis g++-mingw-w64-i686 wine-binfmt wine32"
        RUN_FUNCTIONAL_TESTS=false
        GOAL="deploy"
        ION_CONFIG="--enable-reduce-exports"

    - stage: test
      name: 'Win64  [GOAL: deploy] [no functional tests]'
      env: >-
        HOST=x86_64-w64-mingw32
        PACKAGES="python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64"
        RUN_FUNCTIONAL_TESTS=false
        GOAL="deploy"
        ION_CONFIG="--enable-reduce-exports"

    - stage: test
      name: '32-bit + ion  [GOAL: install] [no gui]'
      env: >-
        HOST=i686-pc-linux-gnu
        PACKAGES="g++-multilib python3-zmq"
        GOAL="install"
        ION_CONFIG="--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++"
        CONFIG_SHELL="/bin/ion"

install:
    # Fix annoying Travis bug: a branch with a single commit has an empty TRAVIS_COMMIT_RANGE sometimes
    - if [ -z "$TRAVIS_COMMIT_RANGE" ]; then export TRAVIS_COMMIT_RANGE="HEAD~..HEAD"; fi
    # Our scripts try to be Travis agnostic
    - export PULL_REQUEST="$TRAVIS_PULL_REQUEST"
    - export COMMIT_RANGE="$TRAVIS_COMMIT_RANGE"
    - export JOB_NUMBER="$TRAVIS_JOB_NUMBER"
    - export HOST_SRC_DIR=$TRAVIS_BUILD_DIR
    - export HOST_CACHE_DIR=$HOME/cache
    - export TRAVIS_COMMIT_LOG=`git log --format=fuller -1`
    - export PYTHON_DEBUG=1
    - source ./ci/matrix.sh
    - mkdir -p $HOST_CACHE_DIR/docker && mkdir -p $HOST_CACHE_DIR/ccache && mkdir -p $HOST_CACHE_DIR/depends && mkdir -p $HOST_CACHE_DIR/sdk-sources
    # Keep this as it makes caching related debugging easier
    - ls -lah $HOST_CACHE_DIR && ls -lah $HOST_CACHE_DIR/depends && ls -lah $HOST_CACHE_DIR/ccache && ls -lah $HOST_CACHE_DIR/docker
    # Load cached builder image
    - if [ -f $HOST_CACHE_DIR/docker/dash-builder-$BUILD_TARGET.tar.gz ]; then zcat $HOST_CACHE_DIR/docker/dash-builder-$BUILD_TARGET.tar.gz | docker load || true; fi
    - travis_retry docker pull ubuntu:bionic
    - travis_retry docker build -t $BUILDER_IMAGE_NAME --build-arg=USER_ID=$UID --build-arg=GROUP_ID=$UID --build-arg=BUILD_TARGET=$BUILD_TARGET -f ci/Dockerfile.builder ci
before_script:
    # Make sure stdout is in blocking mode. Otherwise builds will fail due to large writes to stdout
    # See https://github.com/travis-ci/travis-ci/issues/4704. If this gets fixed, this line can also be removed.
    - python3 -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'
    # Build docker image only for develop branch of the main repo
    - if [ "$TRAVIS_REPO_SLUG" != "dashpay/dash" -o "$TRAVIS_BRANCH" != "develop" -o "$TRAVIS_PULL_REQUEST" != "false" ]; then export DOCKER_BUILD="false"; echo DOCKER_BUILD=$DOCKER_BUILD; fi
after_script:
    - echo $TRAVIS_COMMIT_RANGE
    - echo $TRAVIS_COMMIT_LOG
after_success:
    - if [ "$DOCKER_BUILD" = "true" ]; then docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD && ./docker/push-docker.sh; fi
